
;
; Generate SQL INSERT statements, not used in final product
;

(def ids [126
		  125
		  116
		  119
		  120
		  124
		  121
		  123
		  115
		  118
		  129
		  127
		  143
		  137
		  139
		  138
		  142
		  141
		  144
		  147
		  140
		  148
		  145
		  149
		  150])

(def values [
			 [162483	13508	2650	9179	0	2582]
			 [91313	11197	3965	113442	0	1166]
			 [56329	0	5000	115995	0	500]
			 [127597	0	12500	34412	2830	1680]
			 [146037	7000	40230	40430	0	0]
			 [84114	21000	12500	297038	0	468]
			 [560350	0	12500	520175	15000	0]
			 [60650	0	1000	60181	0	320]
			 [203714	0	32354	74251	0	1562]
			 [146420	6776	18945	262532	0	1262]
			 [55806	0	12500	110676	0	90]
			 [83553	0	5000	112730	0	0]
			 [156400	1500	0	21200	0	0]
			 [439830	0	1818	10633	0	0]
			 [83044	24412	3000	52762	0	0]
			 [95961	0	0	39122	0	0]
			 [336715	3933	27195	99640	0	50]
			 [191428	70000	15851	172460	0	1065]
			 [74200	0	24408	75914	0	8904]
			 [60866	0	0	36862	0	750]
			 [188254	0	0	38790	0	0]
			 [4527	78112	0	4554	0	0]
			 [119554	0	0	6543	0	0]
			 [5800	61346	0	2627	0	250]
			 [99402	33997	500	95203	0	610]
			 ])

(defn make-sql
  [[a b c]]
  (str "(" a ", " b ", " c "), "))


; generate SQL statements to insert facts
(->>
 (interleave
  (mapcat (partial repeat (count (first values))) ids)
  (cycle (range 116 122)) ; fact ids
  (flatten values))
 (partition 3)
 (map make-sql)
 (apply str)
 (str "INSERT INTO place_facts (place_id, fact_id, detail_value) VALUES "))

